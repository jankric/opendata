version: '3.8'

services:
  # Frontend Application (React)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: opendata_frontend_prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - VITE_API_URL=https://api-opendata.gorontalokab.go.id
    networks:
      - opendata_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Application (Laravel)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: opendata_backend_prod
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - ./backend/storage:/app/storage
      - ./backend/public/uploads:/app/public/uploads
      - ./logs:/app/storage/logs
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - APP_URL=https://walidata.gorontalokab.go.id
      - CONTAINER_ROLE=app
    depends_on:
      - db
      - redis
    networks:
      - opendata_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway (Nginx for API)
  api:
    image: nginx:alpine
    container_name: opendata_api_prod
    restart: unless-stopped
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx/api.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
    networks:
      - opendata_network

  queue:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: opendata_queue_prod
    restart: unless-stopped
    volumes:
      - ./backend/storage:/app/storage
      - ./logs:/app/storage/logs
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - CONTAINER_ROLE=queue
    depends_on:
      - db
      - redis
    networks:
      - opendata_network

  scheduler:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: opendata_scheduler_prod
    restart: unless-stopped
    volumes:
      - ./backend/storage:/app/storage
      - ./logs:/app/storage/logs
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - CONTAINER_ROLE=scheduler
    depends_on:
      - db
      - redis
    networks:
      - opendata_network

  db:
    image: postgres:16-alpine
    container_name: opendata_db_prod
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: opendata_portal
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - opendata_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME}"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: opendata_redis_prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - opendata_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Main Nginx (Frontend)
  nginx:
    image: nginx:alpine
    container_name: opendata_nginx_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/frontend.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
    networks:
      - opendata_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  opendata_network:
    driver: bridge